# Problem 2 - Even Fibonacci numbers
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

# This Solution is based on the fact that every third fibonacci number is even

def shift_fib(a, b, c, n):
    for i in xrange(n):
        a = b
        b = c
        c = a + b
    return (a, b, c)

def get_next_even_fib():
    a = 0
    b = 1
    c = 2
    while True:
        # print "a:%d b:%d c:%d" % (a, b, c)
        yield c
        a, b, c = shift_fib(a, b, c, 3)

def sum_fib(limit):
    sum_ = 0
    for f in get_next_even_fib():
        if f >= limit:
            break
        sum_ += f
    return sum_

# print sum_fib(int(raw_input("Limit: ")))
print sum_fib(4000000)
